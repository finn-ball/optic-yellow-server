// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: optic_yellow.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpticYellowServiceClient is the client API for OpticYellowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpticYellowServiceClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type opticYellowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpticYellowServiceClient(cc grpc.ClientConnInterface) OpticYellowServiceClient {
	return &opticYellowServiceClient{cc}
}

func (c *opticYellowServiceClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/optic_yellow.OpticYellowService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpticYellowServiceServer is the server API for OpticYellowService service.
// All implementations must embed UnimplementedOpticYellowServiceServer
// for forward compatibility
type OpticYellowServiceServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	mustEmbedUnimplementedOpticYellowServiceServer()
}

// UnimplementedOpticYellowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpticYellowServiceServer struct {
}

func (UnimplementedOpticYellowServiceServer) Run(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedOpticYellowServiceServer) mustEmbedUnimplementedOpticYellowServiceServer() {}

// UnsafeOpticYellowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpticYellowServiceServer will
// result in compilation errors.
type UnsafeOpticYellowServiceServer interface {
	mustEmbedUnimplementedOpticYellowServiceServer()
}

func RegisterOpticYellowServiceServer(s grpc.ServiceRegistrar, srv OpticYellowServiceServer) {
	s.RegisterService(&OpticYellowService_ServiceDesc, srv)
}

func _OpticYellowService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpticYellowServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optic_yellow.OpticYellowService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpticYellowServiceServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpticYellowService_ServiceDesc is the grpc.ServiceDesc for OpticYellowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpticYellowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optic_yellow.OpticYellowService",
	HandlerType: (*OpticYellowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _OpticYellowService_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optic_yellow.proto",
}
